import { BCS as BcsRegistry } from '@mysten/bcs';
import type { BcsType, BcsTypeOptions } from '@mysten/bcs';
import type { SuiObjectRef as SuiObjectRefType } from '../types/objects.js';
export { TypeTagSerializer } from './type-tag-serializer.js';
/**
 * A reference to a shared object.
 */
export type SharedObjectRef = {
    /** Hex code as string representing the object id */
    objectId: string;
    /** The version the object was shared at */
    initialSharedVersion: number | string;
    /** Whether reference is mutable */
    mutable: boolean;
};
/**
 * An object argument.
 */
export type ObjectArg = {
    ImmOrOwned: SuiObjectRefType;
} | {
    Shared: SharedObjectRef;
} | {
    Receiving: SuiObjectRefType;
};
/**
 * A pure argument.
 */
export type PureArg = {
    Pure: ArrayLike<number>;
};
export declare function isPureArg(arg: any): arg is PureArg;
/**
 * An argument for the transaction. It is a 'meant' enum which expects to have
 * one of the optional properties. If not, the BCS error will be thrown while
 * attempting to form a transaction.
 *
 * Example:
 * ```js
 * let arg1: CallArg = { Object: { Shared: {
 *   objectId: '5460cf92b5e3e7067aaace60d88324095fd22944',
 *   initialSharedVersion: 1,
 *   mutable: true,
 * } } };
 * let arg2: CallArg = { Pure: bcs.ser(BCS.STRING, 100000).toBytes() };
 * let arg3: CallArg = { Object: { ImmOrOwned: {
 *   objectId: '4047d2e25211d87922b6650233bd0503a6734279',
 *   version: 1,
 *   digest: 'bCiANCht4O9MEUhuYjdRCqRPZjr2rJ8MfqNiwyhmRgA='
 * } } };
 * ```
 *
 * For `Pure` arguments BCS is required. You must encode the values with BCS according
 * to the type required by the called function. Pure accepts only serialized values
 */
export type CallArg = PureArg | {
    Object: ObjectArg;
};
/**
 * Kind of a TypeTag which is represented by a Move type identifier.
 */
export type StructTag = {
    address: string;
    module: string;
    name: string;
    typeParams: TypeTag[];
};
/**
 * Sui TypeTag object. A decoupled `0x...::module::Type<???>` parameter.
 */
export type TypeTag = {
    bool: null | true;
} | {
    u8: null | true;
} | {
    u64: null | true;
} | {
    u128: null | true;
} | {
    address: null | true;
} | {
    signer: null | true;
} | {
    vector: TypeTag;
} | {
    struct: StructTag;
} | {
    u16: null | true;
} | {
    u32: null | true;
} | {
    u256: null | true;
};
/**
 * The GasData to be used in the transaction.
 */
export type GasData = {
    payment: SuiObjectRefType[];
    owner: string;
    price: number;
    budget: number;
};
/**
 * TransactionExpiration
 *
 * Indications the expiration time for a transaction.
 */
export type TransactionExpiration = {
    None: null;
} | {
    Epoch: number;
};
declare const bcsRegistry: BcsRegistry;
declare const suiBcs: {
    U8: BcsType<number, number>;
    U16: BcsType<number, number>;
    U32: BcsType<number, number>;
    U64: BcsType<string, string | number | bigint>;
    U128: BcsType<string, string | number | bigint>;
    U256: BcsType<string, string | number | bigint>;
    ULEB128: BcsType<number, number>;
    Bool: BcsType<boolean, boolean>;
    String: BcsType<string, string>;
    Address: BcsType<string, string | Uint8Array>;
    Argument: BcsType<{
        kind: "GasCoin";
    } | {
        index: number;
        kind: "Input";
    } | {
        index: number;
        kind: "Result";
    } | {
        index: number;
        resultIndex: number;
        kind: "NestedResult";
    }, {
        kind: "GasCoin";
    } | {
        index: number;
        kind: "Input";
    } | {
        index: number;
        kind: "Result";
    } | {
        index: number;
        resultIndex: number;
        kind: "NestedResult";
    }>;
    CallArg: BcsType<{
        Object: {
            Shared: {
                objectId: string;
                initialSharedVersion: string;
                mutable: boolean;
            };
        } | {
            ImmOrOwned: {
                objectId: string;
                version: string;
                digest: string;
            };
        } | {
            Receiving: {
                objectId: string;
                version: string;
                digest: string;
            };
        };
    } | {
        Pure: number[];
    } | {
        ObjVec: ({
            Shared: {
                objectId: string;
                initialSharedVersion: string;
                mutable: boolean;
            };
        } | {
            ImmOrOwned: {
                objectId: string;
                version: string;
                digest: string;
            };
        } | {
            Receiving: {
                objectId: string;
                version: string;
                digest: string;
            };
        })[];
    }, {
        Object: {
            Shared: {
                objectId: string | Uint8Array;
                initialSharedVersion: string | number | bigint;
                mutable: boolean;
            };
        } | {
            ImmOrOwned: {
                objectId: string | Uint8Array;
                version: string | number | bigint;
                digest: string;
            };
        } | {
            Receiving: {
                objectId: string | Uint8Array;
                version: string | number | bigint;
                digest: string;
            };
        };
    } | {
        Pure: Iterable<number> & {
            length: number;
        };
    } | {
        ObjVec: Iterable<{
            Shared: {
                objectId: string | Uint8Array;
                initialSharedVersion: string | number | bigint;
                mutable: boolean;
            };
        } | {
            ImmOrOwned: {
                objectId: string | Uint8Array;
                version: string | number | bigint;
                digest: string;
            };
        } | {
            Receiving: {
                objectId: string | Uint8Array;
                version: string | number | bigint;
                digest: string;
            };
        }> & {
            length: number;
        };
    }>;
    CompressedSignature: BcsType<{
        ED25519: number[];
    } | {
        Secp256k1: number[];
    } | {
        Secp256r1: number[];
    } | {
        ZkLogin: number[];
    }, {
        ED25519: Iterable<number> & {
            length: number;
        };
    } | {
        Secp256k1: Iterable<number> & {
            length: number;
        };
    } | {
        Secp256r1: Iterable<number> & {
            length: number;
        };
    } | {
        ZkLogin: Iterable<number> & {
            length: number;
        };
    }>;
    GasData: BcsType<{
        payment: {
            objectId: string;
            version: string;
            digest: string;
        }[];
        owner: string;
        price: string;
        budget: string;
    }, {
        payment: Iterable<{
            objectId: string | Uint8Array;
            version: string | number | bigint;
            digest: string;
        }> & {
            length: number;
        };
        owner: string | Uint8Array;
        price: string | number | bigint;
        budget: string | number | bigint;
    }>;
    MultiSig: BcsType<{
        sigs: ({
            ED25519: number[];
        } | {
            Secp256k1: number[];
        } | {
            Secp256r1: number[];
        } | {
            ZkLogin: number[];
        })[];
        bitmap: number;
        multisig_pk: {
            pk_map: {
                pubKey: {
                    ED25519: number[];
                } | {
                    Secp256k1: number[];
                } | {
                    Secp256r1: number[];
                } | {
                    ZkLogin: number[];
                };
                weight: number;
            }[];
            threshold: number;
        };
    }, {
        sigs: Iterable<{
            ED25519: Iterable<number> & {
                length: number;
            };
        } | {
            Secp256k1: Iterable<number> & {
                length: number;
            };
        } | {
            Secp256r1: Iterable<number> & {
                length: number;
            };
        } | {
            ZkLogin: Iterable<number> & {
                length: number;
            };
        }> & {
            length: number;
        };
        bitmap: number;
        multisig_pk: {
            pk_map: Iterable<{
                pubKey: {
                    ED25519: Iterable<number> & {
                        length: number;
                    };
                } | {
                    Secp256k1: Iterable<number> & {
                        length: number;
                    };
                } | {
                    Secp256r1: Iterable<number> & {
                        length: number;
                    };
                } | {
                    ZkLogin: Iterable<number> & {
                        length: number;
                    };
                };
                weight: number;
            }> & {
                length: number;
            };
            threshold: number;
        };
    }>;
    MultiSigPkMap: BcsType<{
        pubKey: {
            ED25519: number[];
        } | {
            Secp256k1: number[];
        } | {
            Secp256r1: number[];
        } | {
            ZkLogin: number[];
        };
        weight: number;
    }, {
        pubKey: {
            ED25519: Iterable<number> & {
                length: number;
            };
        } | {
            Secp256k1: Iterable<number> & {
                length: number;
            };
        } | {
            Secp256r1: Iterable<number> & {
                length: number;
            };
        } | {
            ZkLogin: Iterable<number> & {
                length: number;
            };
        };
        weight: number;
    }>;
    MultiSigPublicKey: BcsType<{
        pk_map: {
            pubKey: {
                ED25519: number[];
            } | {
                Secp256k1: number[];
            } | {
                Secp256r1: number[];
            } | {
                ZkLogin: number[];
            };
            weight: number;
        }[];
        threshold: number;
    }, {
        pk_map: Iterable<{
            pubKey: {
                ED25519: Iterable<number> & {
                    length: number;
                };
            } | {
                Secp256k1: Iterable<number> & {
                    length: number;
                };
            } | {
                Secp256r1: Iterable<number> & {
                    length: number;
                };
            } | {
                ZkLogin: Iterable<number> & {
                    length: number;
                };
            };
            weight: number;
        }> & {
            length: number;
        };
        threshold: number;
    }>;
    ObjectArg: BcsType<{
        Shared: {
            objectId: string;
            initialSharedVersion: string;
            mutable: boolean;
        };
    } | {
        ImmOrOwned: {
            objectId: string;
            version: string;
            digest: string;
        };
    } | {
        Receiving: {
            objectId: string;
            version: string;
            digest: string;
        };
    }, {
        Shared: {
            objectId: string | Uint8Array;
            initialSharedVersion: string | number | bigint;
            mutable: boolean;
        };
    } | {
        ImmOrOwned: {
            objectId: string | Uint8Array;
            version: string | number | bigint;
            digest: string;
        };
    } | {
        Receiving: {
            objectId: string | Uint8Array;
            version: string | number | bigint;
            digest: string;
        };
    }>;
    ObjectDigest: BcsType<string, string>;
    ProgrammableMoveCall: BcsType<{
        target: `${string}::${string}::${string}`;
        arguments: ({
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        })[];
        typeArguments: string[];
    }, {
        typeArguments: string[];
        kind: "MoveCall";
        arguments: ({
            index: number;
            kind: "Input";
            type?: "object" | undefined;
            value?: any;
        } | {
            type: "pure";
            index: number;
            kind: "Input";
            value?: any;
        } | {
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        })[];
        target: `${string}::${string}::${string}`;
    }>;
    ProgrammableTransaction: BcsType<{
        inputs: ({
            Object: {
                Shared: {
                    objectId: string;
                    initialSharedVersion: string;
                    mutable: boolean;
                };
            } | {
                ImmOrOwned: {
                    objectId: string;
                    version: string;
                    digest: string;
                };
            } | {
                Receiving: {
                    objectId: string;
                    version: string;
                    digest: string;
                };
            };
        } | {
            Pure: number[];
        } | {
            ObjVec: ({
                Shared: {
                    objectId: string;
                    initialSharedVersion: string;
                    mutable: boolean;
                };
            } | {
                ImmOrOwned: {
                    objectId: string;
                    version: string;
                    digest: string;
                };
            } | {
                Receiving: {
                    objectId: string;
                    version: string;
                    digest: string;
                };
            })[];
        })[];
        transactions: ({
            target: `${string}::${string}::${string}`;
            arguments: ({
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            })[];
            typeArguments: string[];
            kind: "MoveCall";
        } | {
            objects: ({
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            })[];
            address: {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            };
            kind: "TransferObjects";
        } | {
            coin: {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            };
            amounts: ({
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            })[];
            kind: "SplitCoins";
        } | {
            destination: {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            };
            sources: ({
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            })[];
            kind: "MergeCoins";
        } | {
            modules: number[][];
            dependencies: string[];
            kind: "Publish";
        } | {
            type: {
                None: true;
            } | {
                Some: TypeTag;
            };
            objects: ({
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            })[];
            kind: "MakeMoveVec";
        } | {
            modules: number[][];
            dependencies: string[];
            packageId: string;
            ticket: {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            };
            kind: "Upgrade";
        })[];
    }, {
        inputs: Iterable<{
            Object: {
                Shared: {
                    objectId: string | Uint8Array;
                    initialSharedVersion: string | number | bigint;
                    mutable: boolean;
                };
            } | {
                ImmOrOwned: {
                    objectId: string | Uint8Array;
                    version: string | number | bigint;
                    digest: string;
                };
            } | {
                Receiving: {
                    objectId: string | Uint8Array;
                    version: string | number | bigint;
                    digest: string;
                };
            };
        } | {
            Pure: Iterable<number> & {
                length: number;
            };
        } | {
            ObjVec: Iterable<{
                Shared: {
                    objectId: string | Uint8Array;
                    initialSharedVersion: string | number | bigint;
                    mutable: boolean;
                };
            } | {
                ImmOrOwned: {
                    objectId: string | Uint8Array;
                    version: string | number | bigint;
                    digest: string;
                };
            } | {
                Receiving: {
                    objectId: string | Uint8Array;
                    version: string | number | bigint;
                    digest: string;
                };
            }> & {
                length: number;
            };
        }> & {
            length: number;
        };
        transactions: Iterable<{
            typeArguments: string[];
            kind: "MoveCall";
            arguments: ({
                index: number;
                kind: "Input";
                type?: "object" | undefined;
                value?: any;
            } | {
                type: "pure";
                index: number;
                kind: "Input";
                value?: any;
            } | {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            })[];
            target: `${string}::${string}::${string}`;
        } | {
            objects: Iterable<{
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            }> & {
                length: number;
            };
            address: {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            };
            kind: "TransferObjects";
        } | {
            coin: {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            };
            amounts: Iterable<{
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            }> & {
                length: number;
            };
            kind: "SplitCoins";
        } | {
            destination: {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            };
            sources: Iterable<{
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            }> & {
                length: number;
            };
            kind: "MergeCoins";
        } | {
            modules: Iterable<Iterable<number> & {
                length: number;
            }> & {
                length: number;
            };
            dependencies: Iterable<string | Uint8Array> & {
                length: number;
            };
            kind: "Publish";
        } | {
            type: {
                None: unknown;
            } | {
                Some: TypeTag;
            };
            objects: Iterable<{
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            }> & {
                length: number;
            };
            kind: "MakeMoveVec";
        } | {
            modules: Iterable<Iterable<number> & {
                length: number;
            }> & {
                length: number;
            };
            dependencies: Iterable<string | Uint8Array> & {
                length: number;
            };
            packageId: string | Uint8Array;
            ticket: {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Input";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            };
            kind: "Upgrade";
        }> & {
            length: number;
        };
    }>;
    PublicKey: BcsType<{
        ED25519: number[];
    } | {
        Secp256k1: number[];
    } | {
        Secp256r1: number[];
    } | {
        ZkLogin: number[];
    }, {
        ED25519: Iterable<number> & {
            length: number;
        };
    } | {
        Secp256k1: Iterable<number> & {
            length: number;
        };
    } | {
        Secp256r1: Iterable<number> & {
            length: number;
        };
    } | {
        ZkLogin: Iterable<number> & {
            length: number;
        };
    }>;
    SenderSignedData: BcsType<{
        data: {
            V1: {
                kind: {
                    ProgrammableTransaction: {
                        inputs: ({
                            Object: {
                                Shared: {
                                    objectId: string;
                                    initialSharedVersion: string;
                                    mutable: boolean;
                                };
                            } | {
                                ImmOrOwned: {
                                    objectId: string;
                                    version: string;
                                    digest: string;
                                };
                            } | {
                                Receiving: {
                                    objectId: string;
                                    version: string;
                                    digest: string;
                                };
                            };
                        } | {
                            Pure: number[];
                        } | {
                            ObjVec: ({
                                Shared: {
                                    objectId: string;
                                    initialSharedVersion: string;
                                    mutable: boolean;
                                };
                            } | {
                                ImmOrOwned: {
                                    objectId: string;
                                    version: string;
                                    digest: string;
                                };
                            } | {
                                Receiving: {
                                    objectId: string;
                                    version: string;
                                    digest: string;
                                };
                            })[];
                        })[];
                        transactions: ({
                            target: `${string}::${string}::${string}`;
                            arguments: ({
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            })[];
                            typeArguments: string[];
                            kind: "MoveCall";
                        } | {
                            objects: ({
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            })[];
                            address: {
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            };
                            kind: "TransferObjects";
                        } | {
                            coin: {
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            };
                            amounts: ({
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            })[];
                            kind: "SplitCoins";
                        } | {
                            destination: {
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            };
                            sources: ({
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            })[];
                            kind: "MergeCoins";
                        } | {
                            modules: number[][];
                            dependencies: string[];
                            kind: "Publish";
                        } | {
                            type: {
                                None: true;
                            } | {
                                Some: TypeTag;
                            };
                            objects: ({
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            })[];
                            kind: "MakeMoveVec";
                        } | {
                            modules: number[][];
                            dependencies: string[];
                            packageId: string;
                            ticket: {
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            };
                            kind: "Upgrade";
                        })[];
                    };
                } | {
                    ChangeEpoch: true;
                } | {
                    Genesis: true;
                } | {
                    ConsensusCommitPrologue: true;
                };
                sender: string;
                gasData: {
                    payment: {
                        objectId: string;
                        version: string;
                        digest: string;
                    }[];
                    owner: string;
                    price: string;
                    budget: string;
                };
                expiration: {
                    None: true;
                } | {
                    Epoch: number;
                };
            };
        };
        txSignatures: number[][];
    }, {
        data: {
            V1: {
                kind: {
                    ProgrammableTransaction: {
                        inputs: Iterable<{
                            Object: {
                                Shared: {
                                    objectId: string | Uint8Array;
                                    initialSharedVersion: string | number | bigint;
                                    mutable: boolean;
                                };
                            } | {
                                ImmOrOwned: {
                                    objectId: string | Uint8Array;
                                    version: string | number | bigint;
                                    digest: string;
                                };
                            } | {
                                Receiving: {
                                    objectId: string | Uint8Array;
                                    version: string | number | bigint;
                                    digest: string;
                                };
                            };
                        } | {
                            Pure: Iterable<number> & {
                                length: number;
                            };
                        } | {
                            ObjVec: Iterable<{
                                Shared: {
                                    objectId: string | Uint8Array;
                                    initialSharedVersion: string | number | bigint;
                                    mutable: boolean;
                                };
                            } | {
                                ImmOrOwned: {
                                    objectId: string | Uint8Array;
                                    version: string | number | bigint;
                                    digest: string;
                                };
                            } | {
                                Receiving: {
                                    objectId: string | Uint8Array;
                                    version: string | number | bigint;
                                    digest: string;
                                };
                            }> & {
                                length: number;
                            };
                        }> & {
                            length: number;
                        };
                        transactions: Iterable<{
                            typeArguments: string[];
                            kind: "MoveCall";
                            arguments: ({
                                index: number;
                                kind: "Input";
                                type?: "object" | undefined;
                                value?: any;
                            } | {
                                type: "pure";
                                index: number;
                                kind: "Input";
                                value?: any;
                            } | {
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            })[];
                            target: `${string}::${string}::${string}`;
                        } | {
                            objects: Iterable<{
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            }> & {
                                length: number;
                            };
                            address: {
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            };
                            kind: "TransferObjects";
                        } | {
                            coin: {
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            };
                            amounts: Iterable<{
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            }> & {
                                length: number;
                            };
                            kind: "SplitCoins";
                        } | {
                            destination: {
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            };
                            sources: Iterable<{
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            }> & {
                                length: number;
                            };
                            kind: "MergeCoins";
                        } | {
                            modules: Iterable<Iterable<number> & {
                                length: number;
                            }> & {
                                length: number;
                            };
                            dependencies: Iterable<string | Uint8Array> & {
                                length: number;
                            };
                            kind: "Publish";
                        } | {
                            type: {
                                None: unknown;
                            } | {
                                Some: TypeTag;
                            };
                            objects: Iterable<{
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            }> & {
                                length: number;
                            };
                            kind: "MakeMoveVec";
                        } | {
                            modules: Iterable<Iterable<number> & {
                                length: number;
                            }> & {
                                length: number;
                            };
                            dependencies: Iterable<string | Uint8Array> & {
                                length: number;
                            };
                            packageId: string | Uint8Array;
                            ticket: {
                                kind: "GasCoin";
                            } | {
                                index: number;
                                kind: "Input";
                            } | {
                                index: number;
                                kind: "Result";
                            } | {
                                index: number;
                                resultIndex: number;
                                kind: "NestedResult";
                            };
                            kind: "Upgrade";
                        }> & {
                            length: number;
                        };
                    };
                } | {
                    ChangeEpoch: unknown;
                } | {
                    Genesis: unknown;
                } | {
                    ConsensusCommitPrologue: unknown;
                };
                sender: string | Uint8Array;
                gasData: {
                    payment: Iterable<{
                        objectId: string | Uint8Array;
                        version: string | number | bigint;
                        digest: string;
                    }> & {
                        length: number;
                    };
                    owner: string | Uint8Array;
                    price: string | number | bigint;
                    budget: string | number | bigint;
                };
                expiration: {
                    None: unknown;
                } | {
                    Epoch: number;
                };
            };
        };
        txSignatures: Iterable<Iterable<number> & {
            length: number;
        }> & {
            length: number;
        };
    }>;
    SharedObjectRef: BcsType<{
        objectId: string;
        initialSharedVersion: string;
        mutable: boolean;
    }, {
        objectId: string | Uint8Array;
        initialSharedVersion: string | number | bigint;
        mutable: boolean;
    }>;
    StructTag: BcsType<{
        address: string;
        module: string;
        name: string;
        typeParams: TypeTag[];
    }, {
        address: string | Uint8Array;
        module: string;
        name: string;
        typeParams: Iterable<TypeTag> & {
            length: number;
        };
    }>;
    SuiObjectRef: BcsType<{
        objectId: string;
        version: string;
        digest: string;
    }, {
        objectId: string | Uint8Array;
        version: string | number | bigint;
        digest: string;
    }>;
    Transaction: BcsType<{
        target: `${string}::${string}::${string}`;
        arguments: ({
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        })[];
        typeArguments: string[];
        kind: "MoveCall";
    } | {
        objects: ({
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        })[];
        address: {
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        };
        kind: "TransferObjects";
    } | {
        coin: {
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        };
        amounts: ({
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        })[];
        kind: "SplitCoins";
    } | {
        destination: {
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        };
        sources: ({
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        })[];
        kind: "MergeCoins";
    } | {
        modules: number[][];
        dependencies: string[];
        kind: "Publish";
    } | {
        type: {
            None: true;
        } | {
            Some: TypeTag;
        };
        objects: ({
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        })[];
        kind: "MakeMoveVec";
    } | {
        modules: number[][];
        dependencies: string[];
        packageId: string;
        ticket: {
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        };
        kind: "Upgrade";
    }, {
        typeArguments: string[];
        kind: "MoveCall";
        arguments: ({
            index: number;
            kind: "Input";
            type?: "object" | undefined;
            value?: any;
        } | {
            type: "pure";
            index: number;
            kind: "Input";
            value?: any;
        } | {
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        })[];
        target: `${string}::${string}::${string}`;
    } | {
        objects: Iterable<{
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        }> & {
            length: number;
        };
        address: {
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        };
        kind: "TransferObjects";
    } | {
        coin: {
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        };
        amounts: Iterable<{
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        }> & {
            length: number;
        };
        kind: "SplitCoins";
    } | {
        destination: {
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        };
        sources: Iterable<{
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        }> & {
            length: number;
        };
        kind: "MergeCoins";
    } | {
        modules: Iterable<Iterable<number> & {
            length: number;
        }> & {
            length: number;
        };
        dependencies: Iterable<string | Uint8Array> & {
            length: number;
        };
        kind: "Publish";
    } | {
        type: {
            None: unknown;
        } | {
            Some: TypeTag;
        };
        objects: Iterable<{
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        }> & {
            length: number;
        };
        kind: "MakeMoveVec";
    } | {
        modules: Iterable<Iterable<number> & {
            length: number;
        }> & {
            length: number;
        };
        dependencies: Iterable<string | Uint8Array> & {
            length: number;
        };
        packageId: string | Uint8Array;
        ticket: {
            kind: "GasCoin";
        } | {
            index: number;
            kind: "Input";
        } | {
            index: number;
            kind: "Result";
        } | {
            index: number;
            resultIndex: number;
            kind: "NestedResult";
        };
        kind: "Upgrade";
    }>;
    TransactionData: BcsType<{
        V1: {
            kind: {
                ProgrammableTransaction: {
                    inputs: ({
                        Object: {
                            Shared: {
                                objectId: string;
                                initialSharedVersion: string;
                                mutable: boolean;
                            };
                        } | {
                            ImmOrOwned: {
                                objectId: string;
                                version: string;
                                digest: string;
                            };
                        } | {
                            Receiving: {
                                objectId: string;
                                version: string;
                                digest: string;
                            };
                        };
                    } | {
                        Pure: number[];
                    } | {
                        ObjVec: ({
                            Shared: {
                                objectId: string;
                                initialSharedVersion: string;
                                mutable: boolean;
                            };
                        } | {
                            ImmOrOwned: {
                                objectId: string;
                                version: string;
                                digest: string;
                            };
                        } | {
                            Receiving: {
                                objectId: string;
                                version: string;
                                digest: string;
                            };
                        })[];
                    })[];
                    transactions: ({
                        target: `${string}::${string}::${string}`;
                        arguments: ({
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        })[];
                        typeArguments: string[];
                        kind: "MoveCall";
                    } | {
                        objects: ({
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        })[];
                        address: {
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        };
                        kind: "TransferObjects";
                    } | {
                        coin: {
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        };
                        amounts: ({
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        })[];
                        kind: "SplitCoins";
                    } | {
                        destination: {
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        };
                        sources: ({
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        })[];
                        kind: "MergeCoins";
                    } | {
                        modules: number[][];
                        dependencies: string[];
                        kind: "Publish";
                    } | {
                        type: {
                            None: true;
                        } | {
                            Some: TypeTag;
                        };
                        objects: ({
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        })[];
                        kind: "MakeMoveVec";
                    } | {
                        modules: number[][];
                        dependencies: string[];
                        packageId: string;
                        ticket: {
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        };
                        kind: "Upgrade";
                    })[];
                };
            } | {
                ChangeEpoch: true;
            } | {
                Genesis: true;
            } | {
                ConsensusCommitPrologue: true;
            };
            sender: string;
            gasData: {
                payment: {
                    objectId: string;
                    version: string;
                    digest: string;
                }[];
                owner: string;
                price: string;
                budget: string;
            };
            expiration: {
                None: true;
            } | {
                Epoch: number;
            };
        };
    }, {
        V1: {
            kind: {
                ProgrammableTransaction: {
                    inputs: Iterable<{
                        Object: {
                            Shared: {
                                objectId: string | Uint8Array;
                                initialSharedVersion: string | number | bigint;
                                mutable: boolean;
                            };
                        } | {
                            ImmOrOwned: {
                                objectId: string | Uint8Array;
                                version: string | number | bigint;
                                digest: string;
                            };
                        } | {
                            Receiving: {
                                objectId: string | Uint8Array;
                                version: string | number | bigint;
                                digest: string;
                            };
                        };
                    } | {
                        Pure: Iterable<number> & {
                            length: number;
                        };
                    } | {
                        ObjVec: Iterable<{
                            Shared: {
                                objectId: string | Uint8Array;
                                initialSharedVersion: string | number | bigint;
                                mutable: boolean;
                            };
                        } | {
                            ImmOrOwned: {
                                objectId: string | Uint8Array;
                                version: string | number | bigint;
                                digest: string;
                            };
                        } | {
                            Receiving: {
                                objectId: string | Uint8Array;
                                version: string | number | bigint;
                                digest: string;
                            };
                        }> & {
                            length: number;
                        };
                    }> & {
                        length: number;
                    };
                    transactions: Iterable<{
                        typeArguments: string[];
                        kind: "MoveCall";
                        arguments: ({
                            index: number;
                            kind: "Input";
                            type?: "object" | undefined;
                            value?: any;
                        } | {
                            type: "pure";
                            index: number;
                            kind: "Input";
                            value?: any;
                        } | {
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        })[];
                        target: `${string}::${string}::${string}`;
                    } | {
                        objects: Iterable<{
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        }> & {
                            length: number;
                        };
                        address: {
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        };
                        kind: "TransferObjects";
                    } | {
                        coin: {
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        };
                        amounts: Iterable<{
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        }> & {
                            length: number;
                        };
                        kind: "SplitCoins";
                    } | {
                        destination: {
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        };
                        sources: Iterable<{
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        }> & {
                            length: number;
                        };
                        kind: "MergeCoins";
                    } | {
                        modules: Iterable<Iterable<number> & {
                            length: number;
                        }> & {
                            length: number;
                        };
                        dependencies: Iterable<string | Uint8Array> & {
                            length: number;
                        };
                        kind: "Publish";
                    } | {
                        type: {
                            None: unknown;
                        } | {
                            Some: TypeTag;
                        };
                        objects: Iterable<{
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        }> & {
                            length: number;
                        };
                        kind: "MakeMoveVec";
                    } | {
                        modules: Iterable<Iterable<number> & {
                            length: number;
                        }> & {
                            length: number;
                        };
                        dependencies: Iterable<string | Uint8Array> & {
                            length: number;
                        };
                        packageId: string | Uint8Array;
                        ticket: {
                            kind: "GasCoin";
                        } | {
                            index: number;
                            kind: "Input";
                        } | {
                            index: number;
                            kind: "Result";
                        } | {
                            index: number;
                            resultIndex: number;
                            kind: "NestedResult";
                        };
                        kind: "Upgrade";
                    }> & {
                        length: number;
                    };
                };
            } | {
                ChangeEpoch: unknown;
            } | {
                Genesis: unknown;
            } | {
                ConsensusCommitPrologue: unknown;
            };
            sender: string | Uint8Array;
            gasData: {
                payment: Iterable<{
                    objectId: string | Uint8Array;
                    version: string | number | bigint;
                    digest: string;
                }> & {
                    length: number;
                };
                owner: string | Uint8Array;
                price: string | number | bigint;
                budget: string | number | bigint;
            };
            expiration: {
                None: unknown;
            } | {
                Epoch: number;
            };
        };
    }>;
    TransactionDataV1: BcsType<{
        kind: {
            ProgrammableTransaction: {
                inputs: ({
                    Object: {
                        Shared: {
                            objectId: string;
                            initialSharedVersion: string;
                            mutable: boolean;
                        };
                    } | {
                        ImmOrOwned: {
                            objectId: string;
                            version: string;
                            digest: string;
                        };
                    } | {
                        Receiving: {
                            objectId: string;
                            version: string;
                            digest: string;
                        };
                    };
                } | {
                    Pure: number[];
                } | {
                    ObjVec: ({
                        Shared: {
                            objectId: string;
                            initialSharedVersion: string;
                            mutable: boolean;
                        };
                    } | {
                        ImmOrOwned: {
                            objectId: string;
                            version: string;
                            digest: string;
                        };
                    } | {
                        Receiving: {
                            objectId: string;
                            version: string;
                            digest: string;
                        };
                    })[];
                })[];
                transactions: ({
                    target: `${string}::${string}::${string}`;
                    arguments: ({
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    })[];
                    typeArguments: string[];
                    kind: "MoveCall";
                } | {
                    objects: ({
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    })[];
                    address: {
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    };
                    kind: "TransferObjects";
                } | {
                    coin: {
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    };
                    amounts: ({
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    })[];
                    kind: "SplitCoins";
                } | {
                    destination: {
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    };
                    sources: ({
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    })[];
                    kind: "MergeCoins";
                } | {
                    modules: number[][];
                    dependencies: string[];
                    kind: "Publish";
                } | {
                    type: {
                        None: true;
                    } | {
                        Some: TypeTag;
                    };
                    objects: ({
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    })[];
                    kind: "MakeMoveVec";
                } | {
                    modules: number[][];
                    dependencies: string[];
                    packageId: string;
                    ticket: {
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    };
                    kind: "Upgrade";
                })[];
            };
        } | {
            ChangeEpoch: true;
        } | {
            Genesis: true;
        } | {
            ConsensusCommitPrologue: true;
        };
        sender: string;
        gasData: {
            payment: {
                objectId: string;
                version: string;
                digest: string;
            }[];
            owner: string;
            price: string;
            budget: string;
        };
        expiration: {
            None: true;
        } | {
            Epoch: number;
        };
    }, {
        kind: {
            ProgrammableTransaction: {
                inputs: Iterable<{
                    Object: {
                        Shared: {
                            objectId: string | Uint8Array;
                            initialSharedVersion: string | number | bigint;
                            mutable: boolean;
                        };
                    } | {
                        ImmOrOwned: {
                            objectId: string | Uint8Array;
                            version: string | number | bigint;
                            digest: string;
                        };
                    } | {
                        Receiving: {
                            objectId: string | Uint8Array;
                            version: string | number | bigint;
                            digest: string;
                        };
                    };
                } | {
                    Pure: Iterable<number> & {
                        length: number;
                    };
                } | {
                    ObjVec: Iterable<{
                        Shared: {
                            objectId: string | Uint8Array;
                            initialSharedVersion: string | number | bigint;
                            mutable: boolean;
                        };
                    } | {
                        ImmOrOwned: {
                            objectId: string | Uint8Array;
                            version: string | number | bigint;
                            digest: string;
                        };
                    } | {
                        Receiving: {
                            objectId: string | Uint8Array;
                            version: string | number | bigint;
                            digest: string;
                        };
                    }> & {
                        length: number;
                    };
                }> & {
                    length: number;
                };
                transactions: Iterable<{
                    typeArguments: string[];
                    kind: "MoveCall";
                    arguments: ({
                        index: number;
                        kind: "Input";
                        type?: "object" | undefined;
                        value?: any;
                    } | {
                        type: "pure";
                        index: number;
                        kind: "Input";
                        value?: any;
                    } | {
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    })[];
                    target: `${string}::${string}::${string}`;
                } | {
                    objects: Iterable<{
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    }> & {
                        length: number;
                    };
                    address: {
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    };
                    kind: "TransferObjects";
                } | {
                    coin: {
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    };
                    amounts: Iterable<{
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    }> & {
                        length: number;
                    };
                    kind: "SplitCoins";
                } | {
                    destination: {
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    };
                    sources: Iterable<{
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    }> & {
                        length: number;
                    };
                    kind: "MergeCoins";
                } | {
                    modules: Iterable<Iterable<number> & {
                        length: number;
                    }> & {
                        length: number;
                    };
                    dependencies: Iterable<string | Uint8Array> & {
                        length: number;
                    };
                    kind: "Publish";
                } | {
                    type: {
                        None: unknown;
                    } | {
                        Some: TypeTag;
                    };
                    objects: Iterable<{
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    }> & {
                        length: number;
                    };
                    kind: "MakeMoveVec";
                } | {
                    modules: Iterable<Iterable<number> & {
                        length: number;
                    }> & {
                        length: number;
                    };
                    dependencies: Iterable<string | Uint8Array> & {
                        length: number;
                    };
                    packageId: string | Uint8Array;
                    ticket: {
                        kind: "GasCoin";
                    } | {
                        index: number;
                        kind: "Input";
                    } | {
                        index: number;
                        kind: "Result";
                    } | {
                        index: number;
                        resultIndex: number;
                        kind: "NestedResult";
                    };
                    kind: "Upgrade";
                }> & {
                    length: number;
                };
            };
        } | {
            ChangeEpoch: unknown;
        } | {
            Genesis: unknown;
        } | {
            ConsensusCommitPrologue: unknown;
        };
        sender: string | Uint8Array;
        gasData: {
            payment: Iterable<{
                objectId: string | Uint8Array;
                version: string | number | bigint;
                digest: string;
            }> & {
                length: number;
            };
            owner: string | Uint8Array;
            price: string | number | bigint;
            budget: string | number | bigint;
        };
        expiration: {
            None: unknown;
        } | {
            Epoch: number;
        };
    }>;
    TransactionExpiration: BcsType<{
        None: true;
    } | {
        Epoch: number;
    }, {
        None: unknown;
    } | {
        Epoch: number;
    }>;
    TransactionKind: BcsType<{
        ProgrammableTransaction: {
            inputs: ({
                Object: {
                    Shared: {
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    };
                } | {
                    ImmOrOwned: {
                        objectId: string;
                        version: string;
                        digest: string;
                    };
                } | {
                    Receiving: {
                        objectId: string;
                        version: string;
                        digest: string;
                    };
                };
            } | {
                Pure: number[];
            } | {
                ObjVec: ({
                    Shared: {
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    };
                } | {
                    ImmOrOwned: {
                        objectId: string;
                        version: string;
                        digest: string;
                    };
                } | {
                    Receiving: {
                        objectId: string;
                        version: string;
                        digest: string;
                    };
                })[];
            })[];
            transactions: ({
                target: `${string}::${string}::${string}`;
                arguments: ({
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                })[];
                typeArguments: string[];
                kind: "MoveCall";
            } | {
                objects: ({
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                })[];
                address: {
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                };
                kind: "TransferObjects";
            } | {
                coin: {
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                };
                amounts: ({
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                })[];
                kind: "SplitCoins";
            } | {
                destination: {
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                };
                sources: ({
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                })[];
                kind: "MergeCoins";
            } | {
                modules: number[][];
                dependencies: string[];
                kind: "Publish";
            } | {
                type: {
                    None: true;
                } | {
                    Some: TypeTag;
                };
                objects: ({
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                })[];
                kind: "MakeMoveVec";
            } | {
                modules: number[][];
                dependencies: string[];
                packageId: string;
                ticket: {
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                };
                kind: "Upgrade";
            })[];
        };
    } | {
        ChangeEpoch: true;
    } | {
        Genesis: true;
    } | {
        ConsensusCommitPrologue: true;
    }, {
        ProgrammableTransaction: {
            inputs: Iterable<{
                Object: {
                    Shared: {
                        objectId: string | Uint8Array;
                        initialSharedVersion: string | number | bigint;
                        mutable: boolean;
                    };
                } | {
                    ImmOrOwned: {
                        objectId: string | Uint8Array;
                        version: string | number | bigint;
                        digest: string;
                    };
                } | {
                    Receiving: {
                        objectId: string | Uint8Array;
                        version: string | number | bigint;
                        digest: string;
                    };
                };
            } | {
                Pure: Iterable<number> & {
                    length: number;
                };
            } | {
                ObjVec: Iterable<{
                    Shared: {
                        objectId: string | Uint8Array;
                        initialSharedVersion: string | number | bigint;
                        mutable: boolean;
                    };
                } | {
                    ImmOrOwned: {
                        objectId: string | Uint8Array;
                        version: string | number | bigint;
                        digest: string;
                    };
                } | {
                    Receiving: {
                        objectId: string | Uint8Array;
                        version: string | number | bigint;
                        digest: string;
                    };
                }> & {
                    length: number;
                };
            }> & {
                length: number;
            };
            transactions: Iterable<{
                typeArguments: string[];
                kind: "MoveCall";
                arguments: ({
                    index: number;
                    kind: "Input";
                    type?: "object" | undefined;
                    value?: any;
                } | {
                    type: "pure";
                    index: number;
                    kind: "Input";
                    value?: any;
                } | {
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                })[];
                target: `${string}::${string}::${string}`;
            } | {
                objects: Iterable<{
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                }> & {
                    length: number;
                };
                address: {
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                };
                kind: "TransferObjects";
            } | {
                coin: {
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                };
                amounts: Iterable<{
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                }> & {
                    length: number;
                };
                kind: "SplitCoins";
            } | {
                destination: {
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                };
                sources: Iterable<{
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                }> & {
                    length: number;
                };
                kind: "MergeCoins";
            } | {
                modules: Iterable<Iterable<number> & {
                    length: number;
                }> & {
                    length: number;
                };
                dependencies: Iterable<string | Uint8Array> & {
                    length: number;
                };
                kind: "Publish";
            } | {
                type: {
                    None: unknown;
                } | {
                    Some: TypeTag;
                };
                objects: Iterable<{
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                }> & {
                    length: number;
                };
                kind: "MakeMoveVec";
            } | {
                modules: Iterable<Iterable<number> & {
                    length: number;
                }> & {
                    length: number;
                };
                dependencies: Iterable<string | Uint8Array> & {
                    length: number;
                };
                packageId: string | Uint8Array;
                ticket: {
                    kind: "GasCoin";
                } | {
                    index: number;
                    kind: "Input";
                } | {
                    index: number;
                    kind: "Result";
                } | {
                    index: number;
                    resultIndex: number;
                    kind: "NestedResult";
                };
                kind: "Upgrade";
            }> & {
                length: number;
            };
        };
    } | {
        ChangeEpoch: unknown;
    } | {
        Genesis: unknown;
    } | {
        ConsensusCommitPrologue: unknown;
    }>;
    TypeTag: BcsType<TypeTag, TypeTag>;
    ser: (type: import("@mysten/bcs").TypeName | import("@mysten/bcs").StructTypeDefinition, data: any, options?: import("@mysten/bcs").BcsWriterOptions | undefined) => import("@mysten/bcs").BcsWriter;
    de: (type: import("@mysten/bcs").TypeName | import("@mysten/bcs").StructTypeDefinition, data: string | Uint8Array, encoding?: import("@mysten/bcs/dist/types.js").Encoding | undefined) => any;
    getTypeInterface: (type: string) => import("@mysten/bcs").TypeInterface;
    hasType: (type: string) => boolean;
    parseTypeName: (name: import("@mysten/bcs").TypeName) => {
        name: string;
        params: import("@mysten/bcs").TypeName[];
    };
    registerAddressType: (name: string, length: number, encoding?: void | import("@mysten/bcs/dist/types.js").Encoding | undefined) => BcsRegistry;
    registerAlias: (name: string, forType: string) => BcsRegistry;
    registerBcsType: (typeName: import("@mysten/bcs").TypeName, createType: (...params: BcsType<any, any>[]) => BcsType<any, any>) => BcsRegistry;
    registerEnumType: (typeName: import("@mysten/bcs").TypeName, variants: import("@mysten/bcs").EnumTypeDefinition) => BcsRegistry;
    registerStructType: (typeName: import("@mysten/bcs").TypeName, fields: import("@mysten/bcs").StructTypeDefinition) => BcsRegistry;
    registerType: (typeName: import("@mysten/bcs").TypeName, encodeCb: (writer: import("@mysten/bcs").BcsWriter, data: any, typeParams: import("@mysten/bcs").TypeName[], typeMap: {
        [key: string]: import("@mysten/bcs").TypeName;
    }) => import("@mysten/bcs").BcsWriter, decodeCb: (reader: import("@mysten/bcs").BcsReader, typeParams: import("@mysten/bcs").TypeName[], typeMap: {
        [key: string]: import("@mysten/bcs").TypeName;
    }) => any, validateCb?: ((data: any) => boolean) | undefined) => BcsRegistry;
    types: Map<string, string | import("@mysten/bcs").TypeInterface>;
    u8(options?: BcsTypeOptions<number, number> | undefined): BcsType<number, number>;
    u16(options?: BcsTypeOptions<number, number> | undefined): BcsType<number, number>;
    u32(options?: BcsTypeOptions<number, number> | undefined): BcsType<number, number>;
    u64(options?: BcsTypeOptions<string, string | number | bigint> | undefined): BcsType<string, string | number | bigint>;
    u128(options?: BcsTypeOptions<string, string | number | bigint> | undefined): BcsType<string, string | number | bigint>;
    u256(options?: BcsTypeOptions<string, string | number | bigint> | undefined): BcsType<string, string | number | bigint>;
    bool(options?: BcsTypeOptions<boolean, boolean> | undefined): BcsType<boolean, boolean>;
    uleb128(options?: BcsTypeOptions<number, number> | undefined): BcsType<number, number>;
    bytes<T extends number>(size: T, options?: BcsTypeOptions<Uint8Array, Iterable<number>> | undefined): BcsType<Uint8Array, Uint8Array>;
    string(options?: BcsTypeOptions<string, string> | undefined): BcsType<string, string>;
    fixedArray<T_1, Input>(size: number, type: BcsType<T_1, Input>, options?: BcsTypeOptions<T_1[], Iterable<Input> & {
        length: number;
    }> | undefined): BcsType<T_1[], Iterable<Input> & {
        length: number;
    }>;
    option<T_2, Input_1>(type: BcsType<T_2, Input_1>): BcsType<T_2 | null, Input_1 | null | undefined>;
    vector<T_3, Input_2>(type: BcsType<T_3, Input_2>, options?: BcsTypeOptions<T_3[], Iterable<Input_2> & {
        length: number;
    }> | undefined): BcsType<T_3[], Iterable<Input_2> & {
        length: number;
    }>;
    tuple<const Types extends readonly BcsType<any, any>[]>(types: Types, options?: BcsTypeOptions<{ -readonly [K in keyof Types]: Types[K] extends BcsType<infer T_4, any> ? T_4 : never; }, { [K_1 in keyof Types]: Types[K_1] extends BcsType<any, infer T_5> ? T_5 : never; }> | undefined): BcsType<{ -readonly [K_2 in keyof Types]: Types[K_2] extends BcsType<infer T_6, any> ? T_6 : never; }, { [K_3 in keyof Types]: Types[K_3] extends BcsType<any, infer T_7> ? T_7 : never; }>;
    struct<T_8 extends Record<string, BcsType<any, any>>>(name: string, fields: T_8, options?: Omit<BcsTypeOptions<{ [K_4 in keyof T_8]: T_8[K_4] extends BcsType<infer U, any> ? U : never; }, { [K_5 in keyof T_8]: T_8[K_5] extends BcsType<any, infer U_1> ? U_1 : never; }>, "name"> | undefined): BcsType<{ [K_6 in keyof T_8]: T_8[K_6] extends BcsType<infer U_2, any> ? U_2 : never; }, { [K_7 in keyof T_8]: T_8[K_7] extends BcsType<any, infer U_3> ? U_3 : never; }>;
    enum<T_9 extends Record<string, BcsType<any, any> | null>>(name: string, values: T_9, options?: Omit<BcsTypeOptions<{ [K_8 in keyof T_9]: T_9[K_8] extends BcsType<infer U_4, any> ? { [K2 in K_8]: U_4; } : { [K2_1 in K_8]: true; }; }[keyof T_9], { [K_9 in keyof T_9]: T_9[K_9] extends BcsType<any, infer U_5> ? { [K2_2 in K_9]: U_5; } : { [K2_3 in K_9]: unknown; }; }[keyof T_9]>, "name"> | undefined): BcsType<{ [K_10 in keyof T_9]: T_9[K_10] extends BcsType<infer U_6, any> ? { [K2_4 in K_10]: U_6; } : { [K2_5 in K_10]: true; }; }[keyof T_9], { [K_11 in keyof T_9]: T_9[K_11] extends BcsType<any, infer U_7> ? { [K2_6 in K_11]: U_7; } : { [K2_7 in K_11]: unknown; }; }[keyof T_9]>;
    map<K_12, V, InputK = K_12, InputV = V>(keyType: BcsType<K_12, InputK>, valueType: BcsType<V, InputV>): BcsType<Map<K_12, V>, Map<InputK, InputV>>;
    generic<const Names extends readonly string[], const Type extends BcsType<any, any>>(names: Names, cb: (...types: { [K_13 in keyof Names]: BcsType<import("@mysten/bcs/dist/types.js").GenericPlaceholder<Names[K_13]>, import("@mysten/bcs/dist/types.js").GenericPlaceholder<Names[K_13]>>; }) => Type): <T_10 extends { [K_14 in keyof Names]: BcsType<any, any>; }>(...types: T_10) => import("@mysten/bcs/dist/types.js").ReplaceBcsGenerics<Type, Names, T_10>;
    lazy<T_11 extends BcsType<any, any>>(cb: () => T_11): T_11;
};
export { suiBcs as bcs, bcsRegistry };
