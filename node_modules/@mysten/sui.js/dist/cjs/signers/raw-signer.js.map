{
  "version": 3,
  "sources": ["../../../src/signers/raw-signer.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\n\nimport type { SuiClient } from '../client/index.js';\nimport type { Keypair } from '../cryptography/keypair.js';\nimport { toSerializedSignature } from '../cryptography/signature.js';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport { SignerWithProvider } from './signer-with-provider.js';\n\nexport class RawSigner extends SignerWithProvider {\n\tprivate readonly keypair: Keypair;\n\n\tconstructor(keypair: Keypair, client: SuiClient) {\n\t\tsuper(client);\n\t\tthis.keypair = keypair;\n\t}\n\n\tasync getAddress(): Promise<string> {\n\t\treturn this.keypair.getPublicKey().toSuiAddress();\n\t}\n\n\tasync signData(data: Uint8Array): Promise<SerializedSignature> {\n\t\tconst pubkey = this.keypair.getPublicKey();\n\t\tconst digest = blake2b(data, { dkLen: 32 });\n\t\tconst signature = this.keypair.signData(digest);\n\t\tconst signatureScheme = this.keypair.getKeyScheme();\n\n\t\treturn toSerializedSignature({\n\t\t\tsignatureScheme,\n\t\t\tsignature,\n\t\t\tpublicKey: pubkey,\n\t\t});\n\t}\n\n\tconnect(client: SuiClient): SignerWithProvider {\n\t\treturn new RawSigner(this.keypair, client);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,qBAAwB;AAIxB,uBAAsC;AAEtC,kCAAmC;AAE5B,MAAM,kBAAkB,+CAAmB;AAAA,EAGjD,YAAY,SAAkB,QAAmB;AAChD,UAAM,MAAM;AACZ,SAAK,UAAU;AAAA,EAChB;AAAA,EAEA,MAAM,aAA8B;AACnC,WAAO,KAAK,QAAQ,aAAa,EAAE,aAAa;AAAA,EACjD;AAAA,EAEA,MAAM,SAAS,MAAgD;AAC9D,UAAM,SAAS,KAAK,QAAQ,aAAa;AACzC,UAAM,aAAS,wBAAQ,MAAM,EAAE,OAAO,GAAG,CAAC;AAC1C,UAAM,YAAY,KAAK,QAAQ,SAAS,MAAM;AAC9C,UAAM,kBAAkB,KAAK,QAAQ,aAAa;AAElD,eAAO,wCAAsB;AAAA,MAC5B;AAAA,MACA;AAAA,MACA,WAAW;AAAA,IACZ,CAAC;AAAA,EACF;AAAA,EAEA,QAAQ,QAAuC;AAC9C,WAAO,IAAI,UAAU,KAAK,SAAS,MAAM;AAAA,EAC1C;AACD;",
  "names": []
}
