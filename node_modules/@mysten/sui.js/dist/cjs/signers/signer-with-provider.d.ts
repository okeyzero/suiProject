import type { TransactionBlock } from '../builder/TransactionBlock.js';
import type { DevInspectResults, DryRunTransactionBlockResponse, ExecuteTransactionRequestType, SuiClient, SuiTransactionBlockResponse, SuiTransactionBlockResponseOptions } from '../client/index.js';
import type { SerializedSignature } from '../cryptography/signature.js';
import type { Signer } from './signer.js';
import type { SignedMessage, SignedTransaction } from './types.js';
export declare abstract class SignerWithProvider implements Signer {
    readonly client: SuiClient;
    abstract getAddress(): Promise<string>;
    /**
     * Returns the signature for the data and the public key of the signer
     */
    abstract signData(data: Uint8Array): Promise<SerializedSignature>;
    abstract connect(client: SuiClient): SignerWithProvider;
    constructor(client: SuiClient);
    /**
     * Sign a message using the keypair, with the `PersonalMessage` intent.
     */
    signMessage(input: {
        message: Uint8Array;
    }): Promise<SignedMessage>;
    protected prepareTransactionBlock(transactionBlock: Uint8Array | TransactionBlock): Promise<Uint8Array>;
    /**
     * Sign a transaction.
     */
    signTransactionBlock(input: {
        transactionBlock: Uint8Array | TransactionBlock;
    }): Promise<SignedTransaction>;
    /**
     * Sign a transaction block and submit to the Fullnode for execution.
     *
     * @param options specify which fields to return (e.g., transaction, effects, events, etc).
     * By default, only the transaction digest will be returned.
     * @param requestType WaitForEffectsCert or WaitForLocalExecution, see details in `ExecuteTransactionRequestType`.
     * Defaults to `WaitForLocalExecution` if options.show_effects or options.show_events is true
     */
    signAndExecuteTransactionBlock(input: {
        transactionBlock: Uint8Array | TransactionBlock;
        /** specify which fields to return (e.g., transaction, effects, events, etc). By default, only the transaction digest will be returned. */
        options?: SuiTransactionBlockResponseOptions;
        /** `WaitForEffectsCert` or `WaitForLocalExecution`, see details in `ExecuteTransactionRequestType`.
         * Defaults to `WaitForLocalExecution` if options.show_effects or options.show_events is true
         */
        requestType?: ExecuteTransactionRequestType;
    }): Promise<SuiTransactionBlockResponse>;
    /**
     * Derive transaction digest from
     * @param tx BCS serialized transaction data or a `Transaction` object
     * @returns transaction digest
     */
    getTransactionBlockDigest(tx: Uint8Array | TransactionBlock): Promise<string>;
    /**
     * Runs the transaction in dev-inpsect mode. Which allows for nearly any
     * transaction (or Move call) with any arguments. Detailed results are
     * provided, including both the transaction effects and any return values.
     */
    devInspectTransactionBlock(input: Omit<Parameters<SuiClient['devInspectTransactionBlock']>[0], 'sender'>): Promise<DevInspectResults>;
    /**
     * Dry run a transaction and return the result.
     */
    dryRunTransactionBlock(input: {
        transactionBlock: TransactionBlock | string | Uint8Array;
    }): Promise<DryRunTransactionBlockResponse>;
}
