import type { SerializedBcs } from '@mysten/bcs';
import type { Infer } from 'superstruct';
import type { SharedObjectRef } from '../bcs/index.js';
import { SuiObjectRef } from '../types/index.js';
export declare const PureCallArg: import("superstruct").Struct<{
    Pure: number[];
}, {
    Pure: import("superstruct").Struct<number[], import("superstruct").Struct<number, null>>;
}>;
export declare const ObjectCallArg: import("superstruct").Struct<{
    Object: {
        ImmOrOwned: {
            digest: string;
            objectId: string;
            version: string | number | bigint;
        };
    } | {
        Shared: {
            objectId: string;
            initialSharedVersion: string | number;
            mutable: boolean;
        };
    } | {
        Receiving: {
            digest: string;
            objectId: string;
            version: string | number | bigint;
        };
    };
}, {
    Object: import("superstruct").Struct<{
        ImmOrOwned: {
            digest: string;
            objectId: string;
            version: string | number | bigint;
        };
    } | {
        Shared: {
            objectId: string;
            initialSharedVersion: string | number;
            mutable: boolean;
        };
    } | {
        Receiving: {
            digest: string;
            objectId: string;
            version: string | number | bigint;
        };
    }, null>;
}>;
export type PureCallArg = Infer<typeof PureCallArg>;
export type ObjectCallArg = Infer<typeof ObjectCallArg>;
export declare const BuilderCallArg: import("superstruct").Struct<{
    Pure: number[];
} | {
    Object: {
        ImmOrOwned: {
            digest: string;
            objectId: string;
            version: string | number | bigint;
        };
    } | {
        Shared: {
            objectId: string;
            initialSharedVersion: string | number;
            mutable: boolean;
        };
    } | {
        Receiving: {
            digest: string;
            objectId: string;
            version: string | number | bigint;
        };
    };
}, null>;
export type BuilderCallArg = Infer<typeof BuilderCallArg>;
declare function Pure(data: Uint8Array | SerializedBcs<any>, type?: string): PureCallArg;
/** @deprecated pass SerializedBcs values instead */
declare function Pure(data: unknown, type?: string): PureCallArg;
export declare const Inputs: {
    Pure: typeof Pure;
    ObjectRef({ objectId, digest, version }: SuiObjectRef): ObjectCallArg;
    SharedObjectRef({ objectId, mutable, initialSharedVersion }: SharedObjectRef): ObjectCallArg;
    ReceivingRef({ objectId, digest, version }: SuiObjectRef): ObjectCallArg;
};
export declare function getIdFromCallArg(arg: string | ObjectCallArg): string;
export declare function getSharedObjectInput(arg: BuilderCallArg): SharedObjectRef | undefined;
export declare function isSharedObjectInput(arg: BuilderCallArg): boolean;
export declare function isMutableSharedObjectInput(arg: BuilderCallArg): boolean;
export {};
