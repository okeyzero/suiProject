{
  "version": 3,
  "sources": ["../../../src/builder/Transactions.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport type { Infer, Struct } from 'superstruct';\nimport {\n\tany,\n\tarray,\n\tassert,\n\tdefine,\n\tinteger,\n\tis,\n\tliteral,\n\tobject,\n\toptional,\n\trecord,\n\tstring,\n\tunion,\n\tunknown,\n} from 'superstruct';\n\nimport type { TypeTag } from '../bcs/index.js';\nimport { bcs } from '../bcs/index.js';\nimport { TypeTagSerializer } from '../bcs/type-tag-serializer.js';\nimport { normalizeSuiObjectId } from '../utils/sui-types.js';\nimport { Inputs } from './Inputs.js';\nimport { create } from './utils.js';\n\nconst option = <T extends Struct<any, any>>(some: T) =>\n\tunion([object({ None: union([literal(true), literal(null)]) }), object({ Some: some })]);\n\nexport const TransactionBlockInput = union([\n\tobject({\n\t\tkind: literal('Input'),\n\t\tindex: integer(),\n\t\tvalue: optional(any()),\n\t\ttype: optional(literal('object')),\n\t}),\n\tobject({\n\t\tkind: literal('Input'),\n\t\tindex: integer(),\n\t\tvalue: optional(any()),\n\t\ttype: literal('pure'),\n\t}),\n]);\nexport type TransactionBlockInput = Infer<typeof TransactionBlockInput>;\n\nconst TransactionArgumentTypes = [\n\tTransactionBlockInput,\n\tobject({ kind: literal('GasCoin') }),\n\tobject({ kind: literal('Result'), index: integer() }),\n\tobject({\n\t\tkind: literal('NestedResult'),\n\t\tindex: integer(),\n\t\tresultIndex: integer(),\n\t}),\n] as const;\n\n// Generic transaction argument\nexport const TransactionArgument = union([...TransactionArgumentTypes]);\nexport type TransactionArgument = Infer<typeof TransactionArgument>;\n\nexport const MoveCallTransaction = object({\n\tkind: literal('MoveCall'),\n\ttarget: define<`${string}::${string}::${string}`>('target', string().validator),\n\ttypeArguments: array(string()),\n\targuments: array(TransactionArgument),\n});\nexport type MoveCallTransaction = Infer<typeof MoveCallTransaction>;\n\nexport const TransferObjectsTransaction = object({\n\tkind: literal('TransferObjects'),\n\tobjects: array(TransactionArgument),\n\taddress: TransactionArgument,\n});\nexport type TransferObjectsTransaction = Infer<typeof TransferObjectsTransaction>;\n\nexport const SplitCoinsTransaction = object({\n\tkind: literal('SplitCoins'),\n\tcoin: TransactionArgument,\n\tamounts: array(TransactionArgument),\n});\nexport type SplitCoinsTransaction = Infer<typeof SplitCoinsTransaction>;\n\nexport const MergeCoinsTransaction = object({\n\tkind: literal('MergeCoins'),\n\tdestination: TransactionArgument,\n\tsources: array(TransactionArgument),\n});\nexport type MergeCoinsTransaction = Infer<typeof MergeCoinsTransaction>;\n\nexport const MakeMoveVecTransaction = object({\n\tkind: literal('MakeMoveVec'),\n\t// TODO: ideally we should use `TypeTag` instead of `record()` here,\n\t// but TypeTag is recursively defined and it's tricky to define a\n\t// recursive struct in superstruct\n\ttype: optional(option(record(string(), unknown()))) as never as Struct<\n\t\t{ Some: TypeTag } | { None: true | null }\n\t>,\n\tobjects: array(TransactionArgument),\n});\nexport type MakeMoveVecTransaction = Infer<typeof MakeMoveVecTransaction>;\n\nexport const PublishTransaction = object({\n\tkind: literal('Publish'),\n\tmodules: array(array(integer())),\n\tdependencies: array(string()),\n});\nexport type PublishTransaction = Infer<typeof PublishTransaction>;\n\n// Keep in sync with constants in\n// crates/sui-framework/packages/sui-framework/sources/package.move\nexport enum UpgradePolicy {\n\tCOMPATIBLE = 0,\n\tADDITIVE = 128,\n\tDEP_ONLY = 192,\n}\n\nexport const UpgradeTransaction = object({\n\tkind: literal('Upgrade'),\n\tmodules: array(array(integer())),\n\tdependencies: array(string()),\n\tpackageId: string(),\n\tticket: TransactionArgument,\n});\nexport type UpgradeTransaction = Infer<typeof UpgradeTransaction>;\n\nconst TransactionTypes = [\n\tMoveCallTransaction,\n\tTransferObjectsTransaction,\n\tSplitCoinsTransaction,\n\tMergeCoinsTransaction,\n\tPublishTransaction,\n\tUpgradeTransaction,\n\tMakeMoveVecTransaction,\n] as const;\n\nexport const TransactionType = union([...TransactionTypes]);\nexport type TransactionType = Infer<typeof TransactionType>;\n\nexport function getTransactionType(data: unknown) {\n\tassert(data, TransactionType);\n\treturn TransactionTypes.find((schema) => is(data, schema as Struct))!;\n}\n\n/**\n * Simple helpers used to construct transactions:\n */\nexport const Transactions = {\n\tMoveCall(\n\t\tinput: Omit<MoveCallTransaction, 'kind' | 'arguments' | 'typeArguments'> & {\n\t\t\targuments?: TransactionArgument[];\n\t\t\ttypeArguments?: string[];\n\t\t},\n\t): MoveCallTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'MoveCall',\n\t\t\t\ttarget: input.target,\n\t\t\t\targuments: input.arguments ?? [],\n\t\t\t\ttypeArguments: input.typeArguments ?? [],\n\t\t\t},\n\t\t\tMoveCallTransaction,\n\t\t);\n\t},\n\tTransferObjects(\n\t\tobjects: TransactionArgument[],\n\t\taddress: TransactionArgument,\n\t): TransferObjectsTransaction {\n\t\tif (address.kind === 'Input' && address.type === 'pure' && typeof address.value !== 'object') {\n\t\t\taddress.value = Inputs.Pure(bcs.Address.serialize(address.value));\n\t\t}\n\n\t\treturn create({ kind: 'TransferObjects', objects, address }, TransferObjectsTransaction);\n\t},\n\tSplitCoins(coin: TransactionArgument, amounts: TransactionArgument[]): SplitCoinsTransaction {\n\t\t// Handle deprecated usage of `Input.Pure(100)`\n\t\tamounts.forEach((input) => {\n\t\t\tif (input.kind === 'Input' && input.type === 'pure' && typeof input.value !== 'object') {\n\t\t\t\tinput.value = Inputs.Pure(bcs.U64.serialize(input.value));\n\t\t\t}\n\t\t});\n\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'SplitCoins',\n\t\t\t\tcoin,\n\t\t\t\tamounts,\n\t\t\t},\n\t\t\tSplitCoinsTransaction,\n\t\t);\n\t},\n\tMergeCoins(\n\t\tdestination: TransactionArgument,\n\t\tsources: TransactionArgument[],\n\t): MergeCoinsTransaction {\n\t\treturn create({ kind: 'MergeCoins', destination, sources }, MergeCoinsTransaction);\n\t},\n\tPublish({\n\t\tmodules,\n\t\tdependencies,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t}): PublishTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'Publish',\n\t\t\t\tmodules: modules.map((module) =>\n\t\t\t\t\ttypeof module === 'string' ? Array.from(fromB64(module)) : module,\n\t\t\t\t),\n\t\t\t\tdependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n\t\t\t},\n\t\t\tPublishTransaction,\n\t\t);\n\t},\n\tUpgrade({\n\t\tmodules,\n\t\tdependencies,\n\t\tpackageId,\n\t\tticket,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t\tpackageId: string;\n\t\tticket: TransactionArgument;\n\t}): UpgradeTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'Upgrade',\n\t\t\t\tmodules: modules.map((module) =>\n\t\t\t\t\ttypeof module === 'string' ? Array.from(fromB64(module)) : module,\n\t\t\t\t),\n\t\t\t\tdependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n\t\t\t\tpackageId,\n\t\t\t\tticket,\n\t\t\t},\n\t\t\tUpgradeTransaction,\n\t\t);\n\t},\n\tMakeMoveVec({\n\t\ttype,\n\t\tobjects,\n\t}: Omit<MakeMoveVecTransaction, 'kind' | 'type'> & {\n\t\ttype?: string;\n\t}): MakeMoveVecTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'MakeMoveVec',\n\t\t\t\ttype: type ? { Some: TypeTagSerializer.parseFromStr(type) } : { None: null },\n\t\t\t\tobjects,\n\t\t\t},\n\t\t\tMakeMoveVecTransaction,\n\t\t);\n\t},\n};\n"],
  "mappings": "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",
  "names": ["UpgradePolicy"]
}
