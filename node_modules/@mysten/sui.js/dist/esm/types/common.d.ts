import type { Infer } from 'superstruct';
import type { CallArg } from '../bcs/index.js';
export declare const ObjectOwner: import("superstruct").Struct<{
    AddressOwner: string;
} | {
    ObjectOwner: string;
} | {
    Shared: {
        initial_shared_version: string | null;
    };
} | "Immutable", null>;
export type ObjectOwner = Infer<typeof ObjectOwner>;
export type SuiJsonValue = boolean | number | string | CallArg | Array<SuiJsonValue>;
export declare const SuiJsonValue: import("superstruct").Struct<SuiJsonValue, null>;
export declare const ProtocolConfig: import("superstruct").Struct<{
    attributes: Record<string, {
        u32: string;
    } | {
        u64: string;
    } | {
        f64: string;
    } | null>;
    featureFlags: Record<string, boolean>;
    maxSupportedProtocolVersion: string;
    minSupportedProtocolVersion: string;
    protocolVersion: string;
}, {
    attributes: import("superstruct").Struct<Record<string, {
        u32: string;
    } | {
        u64: string;
    } | {
        f64: string;
    } | null>, null>;
    featureFlags: import("superstruct").Struct<Record<string, boolean>, null>;
    maxSupportedProtocolVersion: import("superstruct").Struct<string, null>;
    minSupportedProtocolVersion: import("superstruct").Struct<string, null>;
    protocolVersion: import("superstruct").Struct<string, null>;
}>;
export type ProtocolConfig = Infer<typeof ProtocolConfig>;
