import { PublicKey } from '../cryptography/publickey.js';
import type { PublicKeyInitData } from '../cryptography/publickey.js';
import type { SerializedSignature } from '../cryptography/signature.js';
/**
 * A zkLogin public identifier
 */
export declare class ZkLoginPublicIdentifier extends PublicKey {
    private data;
    /**
     * Create a new ZkLoginPublicIdentifier object
     * @param value zkLogin public identifier as buffer or base-64 encoded string
     */
    constructor(value: PublicKeyInitData);
    /**
     * Checks if two zkLogin public identifiers are equal
     */
    equals(publicKey: ZkLoginPublicIdentifier): boolean;
    /**
     * Return the byte array representation of the zkLogin public identifier
     */
    toRawBytes(): Uint8Array;
    /**
     * Return the Sui address associated with this ZkLogin public identifier
     */
    flag(): number;
    /**
     * Verifies that the signature is valid for for the provided message
     */
    verify(_message: Uint8Array, _signature: Uint8Array | SerializedSignature): Promise<boolean>;
}
export declare function toZkLoginPublicIdentifier(addressSeed: bigint, iss: string): ZkLoginPublicIdentifier;
