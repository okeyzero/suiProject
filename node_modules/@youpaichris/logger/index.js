/*!
 * JavaScript logger
 * Logger - v1.0.0 (2021-01-15T14:55:51+0800)
 * Logger - v3.0.0 (2023-12-07T14:13:51+0800)
 * Chris / QQ:10512
 */

const __log = console.log;
const __log__ = function () {
    if (arguments[3] === '\x1B[41m') {
        arguments[4] = "\b" + arguments[4];
        arguments[arguments.length - 1] += consoleStyles['redBG'][1] + consoleStyles['bold'][1] + '\b';
    }
    return __log.apply(this, arguments)
}
const _error = console.error;
console.error = (...msg) => {
    let isOutput = true;
    [...msg].forEach(v => {
        if (v?.includes?.(`Setting the NODE_TLS_REJECT_UNAUTHORIZED`)) {
            isOutput = false;
        }
    })
    isOutput && _error(...msg);
}
const loggerConfig = {
    Date: (() => {
        return Date;
    })(),
    log: (() => {
        return __log__;
    })(),
    error: _error,
    Error: (() => {
        return Error;
    })(),
    RegExp: (() => {
        return RegExp;
    })(),
}


Object.defineProperty(global, '__stack', {
    get: function () {
        return new Error().stack.split('\n').slice(2);
    }
});
Object.defineProperty(global, '__line', {
    get: function () {
        const stack = new Error().stack.split('\n').slice(2);
        const caller = stack[1].trim();
        const index = caller.indexOf('at ') + 3;
        const clean = caller.slice(index);
        const parts = clean.split(':');
        return parts[parts.length - 2];
    }
});

function dateFormat(fmt, date) {
    let ret;
    const opt = {
        "Y+": date.getFullYear().toString(),
        "m+": (date.getMonth() + 1).toString(),
        "d+": date.getDate().toString(),
        "H+": date.getHours().toString(),
        "M+": date.getMinutes().toString(),
        "S+": date.getSeconds().toString(),
        "ms+": (date.getMilliseconds().toString()).padStart(3, "0"),
    };
    for (let k in opt) {
        ret = new loggerConfig.RegExp("(" + k + ")").exec(fmt);
        if (ret) {
            fmt = fmt.replace(ret[1], (ret[1].length === 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")))
        }
    }
    return fmt;
}

const consoleStyles = {
    'bold': ['\x1B[1m', '\x1B[22m'],
    'italic': ['\x1B[3m', '\x1B[23m'],
    'underline': ['\x1B[4m', '\x1B[24m'],
    'inverse': ['\x1B[7m', '\x1B[27m'],
    'strikethrough': ['\x1B[9m', '\x1B[29m'],
    'white': ['\x1B[37m', '\x1B[39m'],
    'grey': ['\x1B[90m', '\x1B[39m'],
    'blue': ['\x1B[34m', '\x1B[39m'],
    'cyan': ['\x1B[36m', '\x1B[39m'],
    'green': ['\x1B[32m', '\x1B[39m'],
    'magenta': ['\x1B[35m', '\x1B[39m'],
    'red': ['\x1B[31m', '\x1B[39m'],
    'yellow': ['\x1B[33m', '\x1B[39m'],
    'whiteBG': ['\x1B[47m', '\x1B[49m'],
    'greyBG': ['\x1B[49;5;8m', '\x1B[49m'],
    'blueBG': ['\x1B[40m', '\x1B[49m'],
    'cyanBG': ['\x1B[46m', '\x1B[49m'],
    'greenBG': ['\x1B[42m', '\x1B[49m'],
    'magentaBG': ['\x1B[45m', '\x1B[49m'],
    'redBG': ['\x1B[41m', '\x1B[49m'],
    'yellowBG': ['\x1B[43m', '\x1B[49m']
}

function getCallerPath() {
    const stack = new Error().stack.split('\n');
    if (stack.length >= 4) {
        const callerLine = stack[3];
        let callerPath = callerLine.trim().substring(callerLine.indexOf('(') + 1, callerLine.lastIndexOf(':'));
        callerPath = callerPath.replaceAll("\\", "/");
        const regex = /\/([^\/]+:\d+:\d+)/;
        const match = callerPath.match(regex);
        if (match && match[1]) {
            const fileNameWithLine = match[1];
            return fileNameWithLine.split(':')[0];
        }
    }
    return "Anonymous";
}

class Logger {
    constructor(path) {
        this.path = path ? path : getCallerPath();
    }

    info(...msg) {
        let pathLine = this?.path ? `[${this.path}:${__line}]` : "Anonymous";
        loggerConfig.log(consoleStyles['green'][0] + dateFormat("YYYY-mm-dd HH:MM:SS.ms", new loggerConfig.Date()),
            consoleStyles['red'][0] + consoleStyles['bold'][0] + "| " +
            consoleStyles['bold'][0] + consoleStyles['blue'][0] + "INFO    " + consoleStyles['red'][0] + " |" +
            consoleStyles['blue'][0], ` ${pathLine.padEnd(22, " ")}${consoleStyles['blue'][0]}ðŸ“¡`, consoleStyles['blue'][0],
            ...msg,
            consoleStyles['blue'][1] + consoleStyles['bold'][1] + '\b'
        );
    };

    warn(...msg) {
        let pathLine = this?.path ? `[${this.path}:${__line}]` : "Anonymous";
        loggerConfig.log(consoleStyles['green'][0] + dateFormat("YYYY-mm-dd HH:MM:SS.ms", new loggerConfig.Date()),
            consoleStyles['red'][0] + consoleStyles['bold'][0] + "| " +
            consoleStyles['bold'][0] + consoleStyles['yellow'][0] + "WARNING " + consoleStyles['red'][0] + " |" +
            consoleStyles['blue'][0], ` ${pathLine.padEnd(22, " ")}${consoleStyles['yellow'][0]}ðŸ’¡`, consoleStyles['yellow'][0],
            ...msg,
            consoleStyles['yellow'][1] + consoleStyles['bold'][1] + '\b'
        );
    };

    error(...msg) {
        let pathLine = this?.path ? `[${this.path}:${__line}]` : "Anonymous";
        loggerConfig.error(consoleStyles['green'][0] + dateFormat("YYYY-mm-dd HH:MM:SS.ms", new loggerConfig.Date()),
            consoleStyles['red'][0] + consoleStyles['bold'][0] + "| " +
            consoleStyles['bold'][0] + consoleStyles['red'][0] + "ERROR   " + consoleStyles['red'][0] + " |" +
            consoleStyles['blue'][0], ` ${pathLine.padEnd(22, " ")}${consoleStyles['red'][0]}ðŸš¨`, consoleStyles['red'][0],
            ...msg,
            consoleStyles['red'][1] + consoleStyles['bold'][1] + '\b'
        );
    };

    success(...msg) {
        let pathLine = this?.path ? `[${this.path}:${__line}]` : "Anonymous";
        loggerConfig.log(consoleStyles['green'][0] + dateFormat("YYYY-mm-dd HH:MM:SS.ms", new loggerConfig.Date()),
            consoleStyles['red'][0] + consoleStyles['bold'][0] + "| " +
            consoleStyles['bold'][0] + consoleStyles['green'][0] + "SUCCESS " + consoleStyles['red'][0] + " |" +
            consoleStyles['blue'][0], ` ${pathLine.padEnd(22, " ")}${consoleStyles['green'][0]}ðŸŽ¯`, consoleStyles['green'][0],
            ...msg,
            consoleStyles['green'][1] + consoleStyles['bold'][1] + '\b'
        );
    };

    debug(...msg) {
        let pathLine = this?.path ? `[${this.path}:${__line}]` : "Anonymous";
        loggerConfig.log(consoleStyles['green'][0] + dateFormat("YYYY-mm-dd HH:MM:SS.ms", new loggerConfig.Date()),
            consoleStyles['red'][0] + consoleStyles['bold'][0] + "| " +
            consoleStyles['bold'][0] + consoleStyles['magenta'][0] + "DEBUG   " + consoleStyles['red'][0] + " |" +
            consoleStyles['blue'][0], ` ${pathLine.padEnd(22, " ")}${consoleStyles['magenta'][0]}ðŸš§`, consoleStyles['magenta'][0],
            ...msg,
            consoleStyles['magenta'][1] + consoleStyles['bold'][1] + '\b'
        );
    };

    call(...msg) {
        let pathLine = this?.path ? `[${this.path}:${__line}]` : "Anonymous";
        loggerConfig.log(consoleStyles['green'][0] + dateFormat("YYYY-mm-dd HH:MM:SS.ms", new loggerConfig.Date()),
            consoleStyles['red'][0] + consoleStyles['bold'][0] + "| " +
            consoleStyles['bold'][0] + consoleStyles['cyan'][0] + "CALL    " + consoleStyles['red'][0] + " |" +
            consoleStyles['blue'][0], ` ${pathLine.padEnd(22, " ")}${consoleStyles['cyan'][0]}ðŸ””`, consoleStyles['cyan'][0],
            ...msg,
            consoleStyles['cyan'][1] + consoleStyles['bold'][1] + '\b'
        );
    };

    critical(...msg) {
        let pathLine = this?.path ? `[${this.path}:${__line}]` : "Anonymous";
        loggerConfig.log(consoleStyles['green'][0] + dateFormat("YYYY-mm-dd HH:MM:SS.ms", new loggerConfig.Date()),
            consoleStyles['red'][0] + consoleStyles['bold'][0] + "| " +
            consoleStyles['bold'][0] + consoleStyles['redBG'][0] + consoleStyles['white'][0] + "CRITICAL" + consoleStyles['redBG'][1] + consoleStyles['red'][0] + " |" +
            consoleStyles['blue'][0], ` ${pathLine.padEnd(22, " ")}${consoleStyles['cyan'][0]}ðŸ”´ ${consoleStyles['white'][0]}`, consoleStyles['redBG'][0],
            ...msg
            // consoleStyles['redBG'][1] + consoleStyles['bold'][1] + '\b'
        );
    };


}

// export default Logger;
/*  es6:
    How to use:
    import Logger from "./Logger.js";
    import path from "path";
    import {fileURLToPath} from 'url';

    const __filename = fileURLToPath(import.meta.url)
    const logger = new Logger(path.basename(__filename));
    logger.info("Hello World!");
    logger.debug("Hello World!");
    logger.warn("Hello World!");
    logger.error("Hello World!");
    logger.success("Hello World!");
    logger.call("Hello World!");
 */

module.exports = Logger;

/*
const logger = new Logger();
logger.info(`info`);
logger.debug("debug")
logger.warn("warn")
logger.call("call")
logger.error("error")
logger.critical("critical.", 2, 3, "4")
logger.info("info again");
*/